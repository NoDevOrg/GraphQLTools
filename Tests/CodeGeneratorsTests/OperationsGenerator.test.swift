import CustomDump
import GraphQL
import XCTest

@testable import CodeGenerators

final class OperationGeneratorTests: XCTestCase {
    func testHeader() throws {
        let generator = try OperationsGenerator()
        generator.printHeader()

        let expected =
            """
            //
            // DO NOT EDIT.
            // swift-format-ignore-file
            //
            // Generated by GraphQLOperationsCodeGen
            //

            """

        XCTAssertNoDifference(expected, generator.code)
    }

    func testBasicTypes() throws {
        let schema =
            """
            type Message {
                id: ID!
                body: String!
            }

            type Query {
                messageList: [Message!]!
            }
            """

        let operation =
            """
            query MessageList {
                messageList {
                    id
                    body
                }
            }
            """

        let generator = try OperationsGenerator(schemas: [schema], operations: [operation])
        try generator.printOperations()

        let expected =
            """

            // MARK: - Operations
            extension Generated {
              struct MessageListQuery: GraphQLOperation {
                typealias Result = Data

                static var name: String = "MessageList"

                static let document: String = \"\"\"
                query MessageList {
                    messageList {
                        id
                        body
                    }
                }
                \"\"\"

                struct Data: Codable {
                  let messageList: [Message]

                  struct Message: Codable {
                    let id: ID
                    let body: String
                  }
                }
              }
            }

            """

        XCTAssertNoDifference(expected, generator.code)
    }

    func testVariableInputTypes() throws {
        let schema =
            """
            type Message {
                id: ID!
                body: String!
            }

            type Query {
                listMessages(room: String!): [Message!]!
            }
            """

        let operation =
            """
            query ListMessages($room: String!) {
                listMessages(room: $room) {
                    id
                    body
                }
            }
            """

        let generator = try OperationsGenerator(schemas: [schema], operations: [operation])
        try generator.printOperations()

        let expected =
            """

            // MARK: - Operations
            extension Generated {
              struct ListMessagesQuery: GraphQLOperation {
                typealias Result = Data

                static var name: String = "ListMessages"

                static let document: String = \"\"\"
                query ListMessages($room: String!) {
                    listMessages(room: $room) {
                        id
                        body
                    }
                }
                \"\"\"

                let room: String

                struct Data: Codable {
                  let listMessages: [Message]

                  struct Message: Codable {
                    let id: ID
                    let body: String
                  }
                }
              }
            }

            """

        XCTAssertNoDifference(expected, generator.code)
    }
}
