//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by GraphQLSchemaCodeGen
//

import Foundation
import GraphQL
import Graphiti
import Pioneer

enum ChatSchema {}

// MARK: - SDL
extension ChatSchema {
  static let sdl: String =
  """
  "ISO8601 Formatted"
  scalar DateTime
  scalar ID

  type Message @key(fields: "id") {
      id: ID!
      body: String!
      recieved: DateTime!
  }

  type Query {
      history(room: String!): [Message!]!
  }

  type Mutation {
      sendMessage(room: String!, message: String!): Message!
  }

  type Subscription {
      messages(room: String!): Message!
  }

  extend schema @link(url: "https://specs.apollo.dev/federation/v2.0", import: [])
  """
}

// MARK: - Types
extension ChatSchema {
  struct Message: Codable {
    let id: ID
    let body: String
    let recieved: DateTime

    struct Key: Codable {
      let id: ID
    }
  }
}

// MARK: - Resolver Arguments
extension ChatSchema {
  struct HistoryArguments: Codable {
    let room: String
  }

  struct SendMessageArguments: Codable {
    let room: String
    let message: String
  }

  struct MessagesArguments: Codable {
    let room: String
  }
}

// MARK: - Resolver Protocol
protocol ChatResolver {
  func history(context: Context, args: ChatSchema.HistoryArguments) async throws -> [ChatSchema.Message]
  func sendMessage(context: Context, args: ChatSchema.SendMessageArguments) async throws -> ChatSchema.Message
  func messages(context: Context, args: ChatSchema.MessagesArguments) async throws -> EventStream<ChatSchema.Message>
  func message(context: Context, key: ChatSchema.Message.Key) async throws -> ChatSchema.Message?
}

// MARK: - Schema Builder
extension ChatSchema {
  static func schema<Resolver>(coders: Coders = Coders()) throws -> Schema<Resolver, Context> where Resolver: ChatResolver {
    try SchemaBuilder(Resolver.self, Context.self)
      .setCoders(to: coders)
      .setFederatedSDL(to: sdl)
      .add {
        Scalar(DateTime.self, as: "DateTime")
          .description("ISO8601 Formatted")

        Scalar(ID.self, as: "ID")

        Type(Message.self, as: "Message") {
          Field("id", at: \.id)
          Field("body", at: \.body)
          Field("recieved", at: \.recieved)
        }
        .key(at: Resolver.message) {
          Argument("id", at: \.id)
        }
      }
      .addQuery {
        Field("history", at: Resolver.history) {
          Argument("room", at: \.room)
        }
      }
      .addMutation {
        Field("sendMessage", at: Resolver.sendMessage) {
          Argument("room", at: \.room)
          Argument("message", at: \.message)
        }
      }
      .addSubscription {
        SubscriptionField("messages", as: Message.self, atSub: Resolver.messages) {
          Argument("room", at: \.room)
        }
      }
      .build()
  }
}
