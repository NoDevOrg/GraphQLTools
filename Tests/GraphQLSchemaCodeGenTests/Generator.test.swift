import XCTest
import CustomDump
import GraphQL
@testable import GraphQLSchemaCodeGen

final class GeneratorTests: XCTestCase {
    func testComment() throws {
        let generator = try Generator()
        generator.comment("Helpful comment")

        let expected =
        """
        // Helpful comment

        """

        XCTAssertNoDifference(expected, generator.code)
    }


    func testHeader() throws {
        let generator = try Generator()
        generator.printHeader()

        let expected =
        """
        //
        // DO NOT EDIT.
        // swift-format-ignore-file
        //
        // Generated by GraphQLSchemaCodeGen
        //

        """

        XCTAssertNoDifference(expected, generator.code)
    }

    func testImportsDefault() throws {
        let generator = try Generator()
        generator.printImports()

        let expected =
        """
        import Foundation
        import GraphQL
        import Graphiti

        """

        XCTAssertNoDifference(expected, generator.code)
    }

    func testImportsCustomImports() throws {
        let generator = try Generator(additionalImports: ["Pioneer", "Vapor"])
        generator.printImports()

        let expected =
        """
        import Foundation
        import GraphQL
        import Graphiti
        import Pioneer
        import Vapor

        """

        XCTAssertNoDifference(expected, generator.code)
    }
    
    func testNamespaceDefault() throws {
        let generator = try Generator()
        generator.printNamespace()

        let expected =
        """
        enum GeneratedSchema {}

        """

        XCTAssertNoDifference(expected, generator.code)
    }

    func testNamespaceCustomNamespace() throws {
        let generator = try Generator(namespace: "Chat")
        generator.printNamespace()

        let expected =
        """
        enum ChatSchema {}

        """

        XCTAssertNoDifference(expected, generator.code)
    }

    func testSDLDefault() throws {
        let generator = try Generator()
        generator.printSDL()

        let expected =
        """
        // MARK: - SDL
        extension GeneratedSchema {
          static let sdl: String =
          \"\"\"
          \"\"\"
        }

        """

        XCTAssertNoDifference(expected, generator.code)
    }

    func testSDLCustomSchemas() throws {
        let schema1 = """
        type Schema1 {}

        """
        let schema2 = """
        type Schema2 {}

        """
        let generator = try Generator(schemas: [schema1, schema2])
        generator.printSDL()

        let expected =
        """
        // MARK: - SDL
        extension GeneratedSchema {
          static let sdl: String =
          \"\"\"
          type Schema1 {}

          type Schema2 {}
          \"\"\"
        }

        """

        XCTAssertNoDifference(expected, generator.code)
    }

    func testTypeMappingDefault() throws {
        let generator = try Generator()
        generator.printTypeMapping()

        let expected =
        """
        """

        XCTAssertNoDifference(expected, generator.code)
    }

    func testTypeMappingCustomMappings() throws {
        let generator = try Generator(typeMapping: ["DateTime": "Foundation.Date", "LocalTime": "Foundation.String"])
        generator.printTypeMapping()

        let expected =
        """
        // MARK: - Type Mapping
        extension GeneratedSchema {
          typealias DateTime = Foundation.Date
          typealias LocalTime = Foundation.String
        }

        """

        XCTAssertNoDifference(expected, generator.code)
    }

    func testGenerator() throws {
        let topicsSchema = try Bundle.module.contents(forResource: "Chat", withExtension: "graphqls")
        let federationSchema = try Bundle.module.contents(forResource: "Federation", withExtension: "graphqls")
        let expected = try Bundle.module.contents(forResource: "ChatSchema.swift", withExtension: "generated")
        
        let generator = try Generator(
            namespace: "Chat",
            additionalImports: [
                "Pioneer"
            ],
            typeMapping: [
                "DateTime": "Foundation.Date"
            ],
            schemas: [
                topicsSchema,
                federationSchema
            ]
        )
        
        try generator.generate()
        
        XCTAssertNoDifference(generator.code, expected)
    }
}
